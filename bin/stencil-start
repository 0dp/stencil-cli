#!/usr/bin/env node

require('colors');

var _ = require('lodash'),
    Autoprefixer = require('autoprefixer-core'),
    Bs = require('browser-sync').create(),
    Fs = require('fs'),
    Path = require('path'),
    Pkg = require('../package.json'),
    Program = require('commander'),
    Server = require('../server'),
    Sass = require('node-sass'),
    Less = require('less'),
    ThemeConfig = require('./lib/themeConfig'),
    Url = require('url'),
    Wreck = require('wreck'),
    themePath = process.cwd(),
    allowedCssCompilers = ['scss', 'less'],
    autoprefixerProcessor,
    browserSyncPort,
    cssCompilerDir,
    cssDestPath = Path.join(themePath, 'assets/css-artifacts/'),
    cssWatchBaseDir = Path.join(themePath, 'assets/'),
    dotStencilFilePath = Path.join(themePath, '.stencil'),
    dotStencilFileExists = Fs.existsSync(dotStencilFilePath),
    dotStencilFile,
    shouldCompileRegex,
    stencilServerPort,
    themeConfig,
    themeConfigPath = Path.join(themePath, 'config.json'),
    themeConfigExists = Fs.existsSync(themeConfigPath);

Program
    .version(Pkg.version)
    .option('-o, --open', 'Automatically open default browser')
    .option('-v, --variation [name]', 'Set which theme variation to use while developing')
    .parse(process.argv);

if (! dotStencilFileExists) {
    return console.error('Error: Please run'.red + ' $ stencil init'.cyan + ' first.'.red);
}

if (! themeConfigExists) {
    return console.error('Error: You must have a '.red + 'config.json'.cyan + ' file in your top level theme directory.');
}

// If the value is true it means that no variation was passed in.
if (Program.variation === true) {
    return console.error('Error: You have to specify a value for -v or --variation'.red);
}

dotStencilFile = Fs.readFileSync(dotStencilFilePath, {encoding: 'utf-8'});
dotStencilFile = JSON.parse(dotStencilFile);

themeConfig = parseThemeConfig();

if (allowedCssCompilers.indexOf(themeConfig.config.css_compiler) === -1) {
    return console.error('Error: Only %s are allowed as CSS Compilers'.red, allowedCssCompilers.join(', '));
}

browserSyncPort = dotStencilFile.port;
stencilServerPort = ++dotStencilFile.port;
cssCompilerDir = cssWatchBaseDir + themeConfig.config.css_compiler;
shouldCompileRegex = new RegExp('^(?!_).+\.(?:' + themeConfig.config.css_compiler + ')$');

autoprefixerProcessor = Autoprefixer({
    browsers: themeConfig.config.autoprefixer_browsers,
    cascade: themeConfig.config.autoprefixer_cascade
});

// Once stapler is in the production environment, we change this line to point to
// dotStencilFile.staplerUrl if it exists or fallback to dotStencilFile.storeUrl
dotStencilFile.staplerUrl = dotStencilFile.staplerUrl || 'https://bc-stapler.herokuapp.com';

if (!(dotStencilFile.normalStoreUrl)) {
    return console.error(
        'Error: Your stencil config is outdated. Please run'.red +
        ' $ stencil init'.cyan + ' again.'.red
    );
}

Wreck.get(
    Url.resolve(dotStencilFile.staplerUrl, '/stencil-version-check?v=' + Pkg.version),
    {
        headers: {
            'stencil-options': '{"get_data_only": true}',
            'stencil-store-url': dotStencilFile.normalStoreUrl
        }
    },
    function(err, res, payload) {
        var retError = err !== null;

        try {
            payload = JSON.parse(payload);
        } catch (e) {
            retError = true;
        }

        if (retError) {
            console.error(
                'The Bigcommerce Store you are pointing to either does\'t exist or is not available at this time.'.red
            );
        } else if (payload.status !== 'ok') {
            console.error(
                'Error: You are using an outdated version of stencil-cli, please run '.red +
                '$ npm install -g bigcommerce/stencil-cli'.cyan
            );
        } else {

            dotStencilFile.storeUrl = payload.sslUrl;

            startServer();
        }
    }
);

/**
 * Starts up the local Stencil Server as well as starts up BrowserSync and sets some watch options.
 */
function startServer() {
    Server({dotStencilFile: dotStencilFile, themeConfig: themeConfig}, function(err) {
        if (err) {
            throw err;
        }

        /**
         * Watch the appropriate css directory based on which compiler was chosen.
         * This will run on each file (and files in sub-directories) when the server starts
         * up. We only want to run compilation on top level files as the ones in sub directories
         * are most likely include files and will be pulled in by the top level files.
         *
         * When a file in a sub directory changes, we have to recompile all top level files because
         * more than one could have included the changed file.
         */
        Bs.watch(cssCompilerDir, function(event, file) {
            var relativePath;

            if (event === 'add' || event === 'change') {
                relativePath = Path.relative(cssCompilerDir, file);
                // Only run it through if it's a top level file
                if (
                    ! relativePath.match(/\//) && shouldCompileRegex.test(relativePath)
                ) {
                    compileCss(themeConfig.config.css_compiler, file);
                // Only re-compile top level files if this is a change event and it's in a sub directory
                } else if (event === 'change') {
                    compileTopLevelCss(cssCompilerDir);
                }
            }
        });

        Bs.watch('config.json', function(event) {
            if (event === 'change') {
                try {
                    themeConfig = parseThemeConfig();
                } catch (e) {
                    return console.error(e);
                }

                compileTopLevelCss(cssCompilerDir);
                Bs.reload();
            }
        });

        Bs.init({
            open: !! Program.open,
            port: browserSyncPort,
            files: [
                '/assets',
                '/templates',
                '/lang'
            ].map(function(val) {
                return Path.join(themePath, val);
            }),
            watchOptions: {
                ignoreInitial: true,
                ignored: [
                    '/assets/scss',
                    '/assets/less',
                    '/assets/css',
                    '/assets/jspm_packages'
                ].map(function(val) {
                    return Path.join(themePath, val);
                })
            },
            proxy: {
                target: "localhost:" + stencilServerPort,
                reqHeaders: function () {
                    return {
                        "host": "localhost:" + browserSyncPort,
                        "accept-encoding": "identity"
                    }
                }
            }
        });

        // Handle manual reloading of browsers by typing 'rs';
        // Borrowed from https://github.com/remy/nodemon
        process.stdin.resume();
        process.stdin.setEncoding('utf8');
        process.stdin.on('data', function (data) {
            data = (data + '').trim().toLowerCase();

            // if the keys entered match the restartable value, then restart!
            if (data === 'rs') {
                Bs.reload();
            }
        });
    });
}

/**
 * Convenience function to parse Theme Config and set some default values if they aren't present
 *
 * @return object
 */
function parseThemeConfig() {
    var themeConfig;

    try {
        themeConfig = ThemeConfig.parse(themeConfigPath, Program.variation);
        themeConfig.config.css_compiler = themeConfig.config.css_compiler || 'scss';
        themeConfig.config.autoprefixer_cascade = themeConfig.config.autoprefixer_cascade || true;
        themeConfig.config.autoprefixer_browsers = themeConfig.config.autoprefixer_browsers || ['> 5% in US'];
    } catch (e) {
        return console.error(e);
    }

    return themeConfig;
}

/**
 * Compiles all top level scss/less files that aren't prefixed with an underscore.
 *
 * @param cssCompilerDir
 */
function compileTopLevelCss(cssCompilerDir) {
    Fs.readdirSync(cssCompilerDir).filter(function(file) {
        return shouldCompileRegex.test(file);
    }).forEach(function(file) {
        compileCss(themeConfig.config.css_compiler, Path.join(cssCompilerDir, file));
    });
}

/**
 * Compiles SCSS, LESS and copies the artifacts to the "css-artifacts"
 * folder.
 *
 * @param compiler
 * @param file
 */
function compileCss(compiler, file) {
    if (! file.match(/\.(?:scss|less)$/)) {
        return;
    }

    // Check to make sure the css-artifacts directory exists
    try {
        Fs.statSync(cssDestPath);
    } catch(e) {
        Fs.mkdirSync(cssDestPath);
    }

    switch (compiler) {
        case 'scss':
            scssCompiler(file, writeCss);
            break;
        case 'less':
            lessCompiler(file, writeCss);
            break;
    }
}

/**
 * Takes content, file source/dest info, and a sourceMap, runs it through Autoprefixer, and then saves the file.
 * @param err
 * @param data
 */
function writeCss(err, data) {
    var css;

    if (err) {
        return console.error(err);
    }

    css = autoprefixerProcessor.process(data.content, {
            from: data.source,
            to: data.dest,
            map: {
                prev: data.sourceMap
            }
        }).css;

    Fs.writeFileSync(data.dest, css);
}

/**
 * Compile SCSS into artifacts folder
 *
 * @param file
 * @param callback
 */
function scssCompiler(file, callback) {
    var content = Fs.readFileSync(file, {encoding: 'utf-8'}),
        dest = cssDestPath + Path.basename(file, '.scss') + '.css',
        themeVariables = '';

    _.forOwn(themeConfig.settings, function(val, key) {
        themeVariables += '$themeSetting-' + key + ': ' + val + ';\n';
    });

    Sass.render({
        data: themeVariables + content,
        includePaths: [Path.dirname(file)],
        outFile: dest,
        sourceMap: true,
        sourceMapEmbed: true
    }, function (err, result) {
        if (err) {
            return callback('SASS Error: '.red + err.message + ' at ' + (err.file + '@' + err.line + ':' + err.column).cyan);
        }

        callback(null, {
            content: result.css,
            source: file,
            dest: dest,
            sourceMap: result.map.mappings
        });
    });
}

/**
 * Compile LESS into artifacts folder
 *
 * @param file
 * @param callback
 */
function lessCompiler(file, callback) {
    var content = Fs.readFileSync(file, {encoding: 'utf-8'}),
        dest = cssDestPath + Path.basename(file, '.less') + '.css',
        themeVariables = '',
        option = {
            filename: file,
            compress: false,
            sourceMap: {
                sourceMapFileInline: true
            }
        };

    _.forOwn(themeConfig.settings, function(val, key) {
        themeVariables += '@themeSetting-' + key + ': ' + val + ';\n';
    });

    Less.render(themeVariables + content, option).then(function(result) {
        callback(null, {
            content: result.css,
            source: file,
            dest: dest,
            sourceMap: result.map
        });
    }, function(err) {
        callback('LESS Error: '.red + err.message + ' at ' + (err.filename + '@' + err.line + ':' + err.column).cyan);
    });
}
